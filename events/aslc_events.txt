namespace = aslc_events

country_event = {
	id = aslc_events.1
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		aslc_calc_planetary_buildings_sum = yes # updates aslc_planetary_buildings_sum var
		set_variable = { which = aslc_leader_cap_current value = value:ascl_country_leader_cap_sum }

		# # debug
		# log = ">> -------------- [this.GetName]"
		# log = ">> PLANETS: [this.aslc_planetary_buildings_sum]"
		# log = ">> TRADITIONS: [this.aslc_traditions_sum]"
		# # log = ">> PL TIERS. VALUE: [value:aslc_planetary_tiers] TRIGGER [trigger:num_planetary_ascension_tiers]"
		# log = ">> SUM: [this.aslc_leader_cap_current]"
		# if = {
		# 	limit = { is_variable_set = aslc_leader_cap }
		# 	log = ">> PREV SUM: [this.aslc_leader_cap]"
		# }

		if = {
			limit = {
				NOT = { check_variable = { which = aslc_leader_cap value = aslc_leader_cap_current } }
			}

			if = {
				limit = { has_modifier = aslc_country_leader_cap_mod }
				remove_modifier = aslc_country_leader_cap_mod
			}
			# log = ">> UPDATE MOD"
			add_modifier = {
				modifier = aslc_country_leader_cap_mod
				multiplier = this.aslc_leader_cap_current
			}

			set_variable = { which = aslc_leader_cap value = aslc_leader_cap_current }
		} 
		else_if = {
			limit = {
				check_variable = { which = aslc_leader_cap value < 1 }
				has_modifier = aslc_country_leader_cap_mod
			}
			remove_modifier = aslc_country_leader_cap_mod
		}
		clear_variable = aslc_leader_cap_current
	}
}


# calculate building bonuses for leader cap
# on_building_complete, on_building_downgraded, on_building_demolished, on_building_upgraded
planet_event = {
	id = aslc_events.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = owner
	}

	immediate = {
		# log = ">> BUILDING UPDATED"
		if = {
			limit = {
				OR = {
					last_building_changed = "building_capital"
					last_building_changed = "building_machine_capital"
					last_building_changed = "building_hive_capital"
					last_building_changed = "building_hab_major_capital"
					last_building_changed = "building_major_capital"
					last_building_changed = "building_machine_major_capital"
					last_building_changed = "building_hive_major_capital"
					last_building_changed = "building_hab_system_capital"
					last_building_changed = "building_resort_major_capital"
					last_building_changed = "building_slave_major_capital"
					last_building_changed = "building_system_capital"
					last_building_changed = "building_machine_system_capital"
					last_building_changed = "building_imperial_hive_capital"
					last_building_changed = "building_imperial_capital"
					last_building_changed = "building_imperial_machine_capital"
				}
			}
			
			set_variable = { which = aslc_planetary_buildings value = value:aslc_leader_cap_per_building }
			owner = {
				aslc_set_cache_variables = yes
				# log = ">> TRIGGER PLANET BUILDING [this.aslc_planet_leadercap] [this.GetName]"
				country_event = { id = aslc_events.1 }
			}
		}
	}
}

# calculate and cache planetary tiers
# on_monthly_pulse_country
country_event = {
	id = aslc_events.3
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		aslc_set_cache_variables = yes
		if = {
			limit = {
				num_planetary_ascension_tiers > 0
				NOT = {
					check_variable = { which = aslc_planetary_tiers value = value:aslc_planetary_tiers_sv }
				}
			}
			set_variable = { which = aslc_planetary_tiers value = value:aslc_planetary_tiers_sv }
			# log = ">> TRIGGER PLANETARY TIER UP [this.aslc_planetary_tiers] [this.GetName]"
			country_event = { id = aslc_events.1 }
		}
	}
}

# recalculate country mod when planet transfered
# on_planet_transfer
# FromFrom = Former Owner (if any)
# From = Country scope (new owner)
# This = Planet scope
planet_event = {
	id = aslc_events.4
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				exists = FromFrom
				FromFrom = {
					is_scope_type = country
				}
			}
			
			FromFrom = {
				aslc_set_cache_variables = yes
				# log = ">> TRIGGER PLANET TRANSFER (prev owner) [this.GetName]"
				country_event = { id = aslc_events.1 }
			}
		}

		if = {
			limit = {
				exists = From
				From = {
					is_scope_type = country
				}
			}
			
			From = {
				aslc_set_cache_variables = yes
				# log = ">> TRIGGER PLANET TRANSFER (new owner) [this.GetName]"
				country_event = { id = aslc_events.1 }
			}
		}

	}
}

# calculate and cache pops num
# on_monthly_pulse_country
country_event = {
	id = aslc_events.5
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		aslc_set_cache_variables = yes
		set_variable = { which = aslc_pops_current value = value:aslc_leader_cap_per_pops }

		if = {
			limit = {
				NOT = {
					check_variable = { which = aslc_pops value = aslc_pops_current }
				}
			}
			set_variable = { which = aslc_pops value = aslc_pops_current }
			country_event = { id = aslc_events.1 }
		}
	}
}
